Elm.BoardControls = Elm.BoardControls || {};
Elm.BoardControls.make = function (_elm) {
   "use strict";
   _elm.BoardControls = _elm.BoardControls || {};
   if (_elm.BoardControls.values)
   return _elm.BoardControls.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "BoardControls",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Pacman = Elm.Pacman.make(_elm);
   var modifyRow = F3(function (cl_ix,
   rw_ix,
   bd) {
      return function () {
         var _raw = A2($Array.get,
         rw_ix,
         bd),
         $ = _raw.ctor === "Just" ? _raw : _U.badCase($moduleName,
         "on line 17, column 21 to 37"),
         rw = $._0;
         var updatedRow = A3($Array.set,
         cl_ix,
         $Pacman.Empty,
         rw);
         return A3($Array.set,
         rw_ix,
         updatedRow,
         bd);
      }();
   });
   var atob = function (bd) {
      return $Array.toList(A2($Array.map,
      function ($) {
         return $List.reverse($Array.toList($));
      },
      bd));
   };
   var btoa = function (bd) {
      return $Array.fromList(A2($List.map,
      function ($) {
         return $Array.fromList($List.reverse($));
      },
      bd));
   };
   var removeTreat = F3(function (_v0,
   treat,
   bd) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return function () {
                 var $ = {ctor: "_Tuple2"
                         ,_0: A2($Basics.clamp,
                         0,
                         $Pacman.numRows - 1)($Basics.floor(_v0._1))
                         ,_1: A2($Basics.clamp,
                         0,
                         $Pacman.numRows - 1)($Basics.ceiling(_v0._1))},
                 cyu = $._0,
                 cyd = $._1;
                 var $ = {ctor: "_Tuple2"
                         ,_0: A2($Basics.clamp,
                         0,
                         $Pacman.numCols - 1)($Basics.floor(_v0._0))
                         ,_1: A2($Basics.clamp,
                         0,
                         $Pacman.numCols - 1)($Basics.ceiling(_v0._0))},
                 cxl = $._0,
                 cxr = $._1;
                 var bd$ = btoa(bd);
                 var _ = {ctor: "_Tuple2"
                         ,_0: A2($Array.get,cyu,bd$)
                         ,_1: A2($Array.get,cyd,bd$)};
                 var rwd = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "Just": switch (_._1.ctor)
                              {case "Just": return _._1._0;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 30, column 32 to 64");
                 }();
                 var rwu = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "Just": switch (_._1.ctor)
                              {case "Just": return _._0._0;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 30, column 32 to 64");
                 }();
                 var _ = {ctor: "_Tuple4"
                         ,_0: A2($Array.get,cxl,rwu)
                         ,_1: A2($Array.get,cxl,rwd)
                         ,_2: A2($Array.get,cxr,rwu)
                         ,_3: A2($Array.get,cxr,rwd)};
                 var bxdl = function () {
                    switch (_.ctor)
                    {case "_Tuple4":
                       switch (_._0.ctor)
                         {case "Just": switch (_._1.ctor)
                              {case "Just": switch (_._2.ctor)
                                   {case "Just": switch (_._3.ctor)
                                        {case "Just": return _._2._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 32, column 12 to 78");
                 }();
                 var bxdr = function () {
                    switch (_.ctor)
                    {case "_Tuple4":
                       switch (_._0.ctor)
                         {case "Just": switch (_._1.ctor)
                              {case "Just": switch (_._2.ctor)
                                   {case "Just": switch (_._3.ctor)
                                        {case "Just": return _._3._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 32, column 12 to 78");
                 }();
                 var bxul = function () {
                    switch (_.ctor)
                    {case "_Tuple4":
                       switch (_._0.ctor)
                         {case "Just": switch (_._1.ctor)
                              {case "Just": switch (_._2.ctor)
                                   {case "Just": switch (_._3.ctor)
                                        {case "Just": return _._0._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 32, column 12 to 78");
                 }();
                 var bxur = function () {
                    switch (_.ctor)
                    {case "_Tuple4":
                       switch (_._0.ctor)
                         {case "Just": switch (_._1.ctor)
                              {case "Just": switch (_._2.ctor)
                                   {case "Just": switch (_._3.ctor)
                                        {case "Just": return _._1._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 32, column 12 to 78");
                 }();
                 return function () {
                    var _v50 = {ctor: "_Tuple4"
                               ,_0: bxul
                               ,_1: bxur
                               ,_2: bxdl
                               ,_3: bxdr};
                    switch (_v50.ctor)
                    {case "_Tuple4":
                       return {ctor: "_Tuple2"
                              ,_0: true
                              ,_1: A3(modifyRow,
                              cxl,
                              cyu,
                              bd$)};}
                    return {ctor: "_Tuple2"
                           ,_0: false
                           ,_1: bd$};
                 }();
              }();}
         _U.badCase($moduleName,
         "between lines 24 and 39");
      }();
   });
   var updateBoard = F2(function (board_old,
   pacman_old) {
      return function () {
         var $ = A3(removeTreat,
         pacman_old.pos,
         $Pacman.Pill,
         board_old),
         bPills = $._0,
         board_new2 = $._1;
         var $ = A3(removeTreat,
         pacman_old.pos,
         $Pacman.Pellet,
         board_old),
         bPells = $._0,
         board_new1 = $._1;
         return bPells ? {ctor: "_Tuple2"
                         ,_0: $Pacman.pelletPoint
                         ,_1: atob(board_new1)} : bPills ? {ctor: "_Tuple2"
                                                           ,_0: $Pacman.pillPoint
                                                           ,_1: atob(board_new2)} : {ctor: "_Tuple2"
                                                                                    ,_0: 0
                                                                                    ,_1: board_old};
      }();
   });
   _elm.BoardControls.values = {_op: _op
                               ,btoa: btoa
                               ,atob: atob
                               ,modifyRow: modifyRow
                               ,removeTreat: removeTreat
                               ,updateBoard: updateBoard};
   return _elm.BoardControls.values;
};