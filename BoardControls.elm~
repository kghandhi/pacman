module BoardControls where

import Pacman as Pac
import Array (Array)
import Array as Arr
import List

btoa : Pac.Board -> Array (Array Pac.Box)
btoa bd = Arr.fromList <| List.map Arr.fromList bd

atob bd = Arr.toList <| List.map Arr.toList bd

modifyRow cl rw bd =
    let
        mod rw' = if rw == rw' then Arr.set Pac.Empty cl rw
                  else rw
    in
      Arr.map mod bd

isPellet : Pac.Pos -> Pac.Board -> Bool
isPellet (x, y) bd =
  let
      bd' = btoa bd
      (cxl, cxr) = (clamp 0 (Pac.numCols - 1) <| floor  x,
                          clamp 0 (Pac.numCols - 1) <| ceiling x)
      (cyu, cyd) = (clamp 0 (Pac.numRows - 1) <| floor   y,
                    clamp 0 (Pac.numRows - 1) <| ceiling y)
      (Just rwu,  Just rwd) = (Arr.get cyu bd', Arr.get cyd bd')
      (Just bxul, Just bxur, Just bxdl, Just bxdr) =
          (Arr.get cxl rwu, Arr.get cxl rwd, Arr.get cxr rwu, Arr.get cxr rwd)
  in
    case (bxul, bxur, bxdl, bxdr) of
      (Pac.Pellet, _, _, _) -> (modifyRow cxl rwu bd', True)
      (_, Pac.Pellet, _, _) -> (modifyRow cxl rwd bd', True)
      (_, _, Pac.Pellet, _) -> (modifyRow cxr rwu bd', True)
      (_, _, _, Pac.Pellet) -> (modifyRow cxr rwd bd', True)
      _                   -> (bd', False)

updateBoard : Pac.Board -> Pac.Pacman -> Pac.Board
updateBoard board_old pacman_old = atob (isPellet pacman_old.pos board_old)
